#
#  Copyright (c) 2022, 2023 Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
#  Copyright (c) 2022, 2023 ZF Friedrichshafen AG
#  Copyright (c) 2022, 2023 Contributors to the Eclipse Foundation
#
#  See the NOTICE file(s) distributed with this work for additional
#  information regarding copyright ownership.
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License, Version 2.0 which is available at
#  https://www.apache.org/licenses/LICENSE-2.0.
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
#
#  SPDX-License-Identifier: Apache-2.0
#

###########
# Install #
###########
install:
  edc:
    vault: true
    daps: false
    consumer: false
    provider: false

  mid: true
  digitalTwin: false
  semanticHub: false
  keycloak: true
  discovery: false

  irs:
    providerBackend: false
    backend: false
    frontend: false

##########
# COMMON #
##########
config:
  grafana:
    username: &config-grafana-username "admin"
    password: &config-grafana-password "password"
    secret:
      name: &config-grafana-secret-name irs-grafana
  minio:
    username: &config-minio-username "admin"
    password: &config-minio-password "password"
    secret:
      name: &config-minio-secret-name "irs-minio"
  vault:
    url: &config-vault-url http://edc-vault:8200
    token: &config-vault-token "root"
    secret.path: &config-vault-api-secret-path "/v1/secret"
    secret:
      name: &config-vault-secret-name edc-vault
      dataEncryptionName: &config-vault-secret-data-encryption-name "data-encryption"
      dataEncryptionValue: &config-vault-secret-data-encryption-value "H7j47H6vVQQOv/hbdAYz+w=="
      dapsCertName: &config-vault-secret-daps-cert-name "daps-cert"
      dapsCertValue: &config-vault-secret-daps-cert-value "FILL ME UP"
      dapsKeyName: &config-vault-secret-daps-key-name "daps-key"
      dapsKeyValue: &config-vault-secret-daps-key-value "FILL ME UP"
  edc:
    consumer:
      hostname:
        controlplane: &config-edc-consumer-controlplane-hostname "http://edc-consumer-control-plane:8282/api/v1/ids"
      database:
        host: &config-edc-consumer-database-host "edc-consumer-database"
        name: &config-edc-consumer-database-name "edc-consumer"
        username: &config-edc-consumer-database-username "edc-consumer-user"
        password: &config-edc-consumer-database-password "edc-consumer-pass"
        postgres:
          password: &config-edc-consumer-database-postgres-password "admin"
        secret:
          name: &config-edc-consumer-database-secret-name edc-consumer-database
    provider:
      hostname:
        controlplane: &config-edc-provider-controlplane-hostname "http://edc-provider-control-plane:8282/api/v1/ids"
      database:
        host: &config-edc-provider-database-host "edc-provider-database"
        name: &config-edc-provider-database-name "edc-provider"
        username: &config-edc-provider-database-username "edc-provider-user"
        password: &config-edc-provider-database-password "edc-provider-pass"
        postgres:
          password: &config-edc-provider-database-postgres-password "admin"
        secret:
          name: &config-edc-provider-database-secret-name edc-provider-database
    api:
      auth:
        key: &config-edc-auth-api-key "password"
  oauth:
    client:
      id:
        provider: &config-oauth-client-id-provider "edc-provider"
        consumer: &config-oauth-client-id-consumer "edc-consumer"
    provider:
      jwks:
        url: &config-oauth-jwts-url "http://edc-daps:4567/jwks.json"
    token:
      url: &config-oauth-token-url "http://edc-daps:4567/token"
  keycloak:
    grand:
      type: &config-keycloak-grand-type client_credentials
    scope: &config-keycloak-scope catena-scope

    client:
      id: &config-keycloak-client-id "catena-client-id"
      secret: &config-keycloak-client-secret "catena-client-secret"

    token:
      url: &config-keycloak-token-url "http://keycloak:8080/connect/token"
    cert:
      url: &config-keycloak-certs-url "http://keycloak:8080/.well-known/openid-configuration/jwks"
  irs:
    existingSecret: &config-irs-existingSecret false
    secret:
      name: &config-irs-secret-name "irs-backend-service"
      minio:
        user: *config-minio-username
        password: *config-minio-password
      edc:
        api:
          secret: *config-edc-auth-api-key
      grafana:
        user: *config-grafana-username
        password: *config-grafana-password
  discovery:
    host: &discovery-host "discovery:8080"

#########################
# Global Values configuration     #
#########################
global:
  enablePrometheus: false  # <global.enablePrometheus>
  enableGrafana: false  # <global.enableGrafana>

#########################
# Frontend Chart Values configuration     #
#########################
frontend:
  # Default values for k8s-helm-example.
  # This is a YAML-formatted file.
  # Declare variables to be passed into your templates.
  nameOverride: "tx-frontend"
  fullnameOverride: "tx-frontend"
  replicaCount: 1
  image:
    repository: tractusx/tx-traceability-foss
    pullPolicy: Always
    CATENAX_PORTAL_API_URL: "CHANGEME"  # https://<backend.ingres.host>/api
    CATENAX_PORTAL_KEYCLOAK_URL: "CHANGEME"  # portal api keycloak example: https://keycloak.net/auth
    CATENAX_PORTAL_BACKEND_DOMAIN: "CHANGEME"  # portal backend domain example: catena-x.net
    CATENAX_PORTAL_URL: "CHANGEME"  # portal url example: https://portal.net/
    CATENAX_PORTAL_CLIENT_ID: "CHANGEME"  # application id created on portal

  ##
  ## Image pull secret to create to obtain the container image
  ## Note: 'imagePullSecret.dockerconfigjson' takes precedence if configured together with 'imagePullSecrets'
  ##
  imagePullSecrets: []

  ##
  ## Existing image pull secret to use to obtain the container image
  ##
  # imagePullSecrets:
  #   - name: machineuser-pull-secret-ro

  autoscaling:
    enabled: false

  serviceAccount:
    ##
    ## Specifies whether a service account should be created per release
    ##
    create: true
    ##
    ## Annotations to add to the service account
    ##
    annotations: {}
    ##
    ## The name of the service account to use.
    ## If not set and create is true, a name is generated using the fullname template
    ##
    name: ""


  podAnnotations: {}

  podSecurityContext: {}
  # fsGroup: 2000

  # Following Catena-X Helm Best Practices @url: https://catenax-ng.github.io/docs/kubernetes-basics/helm
  # @url: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  securityContext:
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    runAsUser: 101
    # runAsGroup: 3000

  service:
    type: ClusterIP
    port: 8080


  # Following Catena-X Helm Best Practices @url: https://catenax-ng.github.io/docs/kubernetes-basics/helm
  # @url: https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-resource-requests-and-limits
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 125m
      memory: 512Mi

  nodeSelector: {}

  tolerations: []

  # Following Catena-X Helm Best Practices @url: https://catenax-ng.github.io/docs/kubernetes-basics/helm
  # @url: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/name
                  operator: DoesNotExist
            topologyKey: kubernetes.io/hostname

  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts: []
    tls: []

  # Following Catena-X Helm Best Practices @url: https://catenax-ng.github.io/docs/kubernetes-basics/helm
  # @url: https://github.com/helm/charts/blob/master/stable/nginx-ingress/values.yaml#L210
  livenessProbe:
    failureThreshold: 6
    initialDelaySeconds: 180
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    failureThreshold: 6
    initialDelaySeconds: 180
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1

#########################
# Backend Chart Values configuration     #
#########################
backend:
  # Default values for k8s-helm-example.
  # This is a YAML-formatted file.
  # Declare variables to be passed into your templates.
  nameOverride: "tx-backend"
  fullnameOverride: "tx-backend"
  replicaCount: 1

  image:
    repository: tractusx/tx-traceability-foss
    pullPolicy: Always

  springprofile: dev  # will be set as dev

  ##
  ## Image pull secret to create to obtain the container image
  ## Note: 'imagePullSecret.dockerconfigjson' takes precedence if configured together with 'imagePullSecrets'
  ##
  imagePullSecret:
    dockerconfigjson: ""

  ##
  ## Existing image pull secret to use to obtain the container image
  ##
  imagePullSecrets: []

  serviceAccount:
    ##
    ## Specifies whether a service account should be created per release
    ##
    create: true
    ##
    ## Annotations to add to the service account
    ##
    annotations: {}
    ##
    ## The name of the service account to use.
    ## If not set and create is true, a name is generated using the fullname template
    ##
    name: ""
  ## dd

  podAnnotations: {}


  podSecurityContext:
    runAsUser: 10000
    seccompProfile:
      type: RuntimeDefault

  # Following Catena-X Helm Best Practices @url: https://catenax-ng.github.io/docs/kubernetes-basics/helm
  # @url: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  securityContext:
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    runAsUser: 10000
    runAsGroup: 1000
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: false

  service:
    type: ClusterIP
    port: 8080

  autoscaling:
    enabled: false

  # Following Catena-X Helm Best Practices @url: https://catenax-ng.github.io/docs/kubernetes-basics/helm
  # @url: https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-resource-requests-and-limits
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 125m
      memory: 512Mi

  nodeSelector: {}

  tolerations: []

  # Following Catena-X Helm Best Practices @url: https://catenax-ng.github.io/docs/kubernetes-basics/helm
  # @url: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/name
                  operator: DoesNotExist
            topologyKey: kubernetes.io/hostname

  # Following Catena-X Helm Best Practices @url: https://catenax-ng.github.io/docs/kubernetes-basics/helm
  # @url: https://github.com/helm/charts/blob/master/stable/nginx-ingress/values.yaml#L210
  livenessProbe:
    failureThreshold: 6
    initialDelaySeconds: 180
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    failureThreshold: 6
    initialDelaySeconds: 180
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1

  ingress:
    hosts:
      - "https://replace.me"
    tls:
      - hosts:
          - "https://replace.me"
        secretName: tls-secret

  healthCheck:
    enabled: true  # <healthCheck.enabled>

  traceability:
    bpn: "CHANGEME"  # <traceability.bpn>
    url: ""  # backend url example: https://<backend.ingress.hosts>

  datasource:
    url: jdbc:postgresql://tx-backend-postgresql:5432/trace
    username: "traceuser"
    password: "CHANGEME"  # <datasource.password>

  oauth2:
    clientId: "CHANGEME"  # <oauth2.clientId>
    clientSecret: "CHANGEME"  # <oauth2.clientSecret>
    clientTokenUri: "https://changeme.com"  # <oauth2.clientTokenUri>
    jwkSetUri: "https://changeme.com"  # <oauth2.jwkSetUri>
    resourceClient: "CHANGEME"  # application id created on portal

  edc:
    apiKey: "CHANGEME"  # <tractusx-connector.controlplane.endpoints.management.authKey>
    providerUrl: "CHANGEME"  #  example: https://<tractusx-connector.controlplane.ingress.hosts>
    callbackUrl: "CHANGEME"  # example: http://<irs-helm.nameOverride>:8181/internal/endpoint-data-reference
    callbackUrlEdcClient: "CHANGEME"  # example: https://<backend.ingress.hosts>/api/internal/endpoint-data-reference
    dataEndpointUrl: "CHANGEME"  # example: https://<tractusx-connector.controlplane.ingress.hosts>/management"

  discoveryfinder:
    baseUrl: "CHANGEME"  # example: https://discoveryfinder.net/discoveryfinder/api/administration/connectors/discovery/search

  irs:
    baseUrl: "https://replace.me"  # https://<irs-helm.ingress.host>
  registry:
    urlWithPath: "https://replace.me"  # digitalTwinRegistry /semantics/registry/api/v3.0
  portal:
    baseUrl: "https://replace.me"

  config:
    allowedCorsOriginFirst: "https://replace.me"
    allowedCorsOriginSecond: "https://replace.me"

  #  required for init containers checking for dependant pod readiness before starting up backend
  dependencies:
    enabled: false  # enable dependency check init containers
    irs: "CHANGEME"  # <irs-helm.nameOverride>
    edc: "CHANGEME"  # <tractusx-connector.nameOverride

#########################
# PG Admin configuration     #
#########################
pgadmin4:
  nameOverride: "tracex-pgadmin4"
  fullnameOverride: "tracex-pgadmin4"
  enabled: true  # <pgadmin4.enabled>
  ingress:
    enabled: false   # <pgadmin4.ingress.enabled>

  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 256m
      memory: 512Mi

#########################
# Postgres configuration     #
#########################
postgresql:
  enabled: true

  nameOverride: "tx-backend-postgresql"
  fullnameOverride: "tx-backend-postgresql"

  auth:
    postgresPassword: "password"
    password: "password"
    database: "trace"
    username: "traceuser"

#########################
# IRS configuration     #
#########################
irs-helm:
  enabled: true  # <irs-helm.enabled>
  nameOverride: "tracex-irs"
  fullnameOverride: "tracex-irs"
###################################
# EDC Consumer configuration  #
###################################
tractusx-connector:
  enabled: true
  nameOverride: "tracex-consumer-edc"
  fullnameOverride: "tracex-consumer-edc"
  participant:
    id: "BPN"

  # Do not install tractusX based PostgreSQL
  install:
    postgresql: false

  vault:
    hashicorp:
      url: *config-vault-url
      token: *config-vault-token
      api:
        secret:
          path: *config-vault-api-secret-path

  backendService:
    httpProxyTokenReceiverUrl: "http://localhost:8080"

  controlplane:
    endpoints:
      # -- default api for health checks, should not be added to any ingress
      default:
        # -- port for incoming api calls
        port: 8080
        # -- path for incoming api calls
        path: /api
      # -- data management api, used by internal users, can be added to an ingress and must not be internet facing
      management:
        # -- port for incoming api calls
        port: 8081
        # -- path for incoming api calls
        path: /management
        # -- authentication key, must be attached to each 'X-Api-Key' request header
        authKey: *config-edc-auth-api-key
      # -- control api, used for internal control calls. can be added to the internal ingress, but should probably not
      control:
        # -- port for incoming api calls
        port: 8083
        # -- path for incoming api calls
        path: /control
      # -- ids api, used for inter connector communication and must be internet facing
      protocol:
        # -- port for incoming api calls
        port: 8084
        # -- path for incoming api calls
        path: /api/v1/dsp
      # -- metrics api, used for application metrics, must not be internet facing
      metrics:
        # -- port for incoming api calls
        port: 9090
        # -- path for incoming api calls
        path: /metrics


  ##################################
  # EDC Postgres Configuration #
  ##################################
  postgresql:
    enabled: true
    auth:
      username: "traceuser"
      password: "password"
    username: "traceuser"
    password: "password"
    jdbcUrl: "jdbc:postgresql://tracex-consumer-edc-postgresql:5432/trace"

# ###########
# EDC VAULT #
# ###########
edc-vault:
  fullnameOverride: "edc-vault"
  enabled: true
  injector:
    # enabled: false
    enabled: true
    metrics:
      enabled: true
  server:
    logLevel: "trace"
    logFormat: "standard"
    dev:
      enabled: true
      devRootToken: *config-vault-token

    # Must be the same certificate that is configured in section 'ids-daps'
    extraEnvironmentVars:
      SECRET_DATA_ENCRYPTION_NAME: *config-vault-secret-data-encryption-name
      SECRET_DATA_ENCRYPTION_VALUE: *config-vault-secret-data-encryption-value
      SECRET_DAPS_CERT_NAME: *config-vault-secret-daps-cert-name
      SECRET_DAPS_CERT_VALUE: *config-vault-secret-daps-cert-value
      SECRET_DAPS_KEY_NAME: *config-vault-secret-daps-key-name
      SECRET_DAPS_KEY_VALUE: *config-vault-secret-daps-key-value
    postStart:
      - "sh"
      - "-c"
      - |
        {

        sleep 5

        /bin/vault audit enable file file_path=/tmp/vault_log.txt

        /bin/vault kv put secret/${SECRET_DATA_ENCRYPTION_NAME} content=${SECRET_DATA_ENCRYPTION_VALUE}

        cat << EOF | /bin/vault kv put secret/${SECRET_DAPS_KEY_NAME} content=-
        -----BEGIN PRIVATE KEY-----
        MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDRl5vqQTWBNDFq
        QonUKKC54cMB3CPat8Ec7yi4RnhuKdvmUX6yuDEsC4ia5wLaPQEsAiGWopjeXGDx
        NS7nxAauZC/t8R6iZ6g+APq1zS4T/Kz48c609CZ8ryEKQtLgnKSNnJBYFf7wz7iV
        blcXl4idvL8kUbucw+giKiewTgGbg8nCBn2PQ9JXWPr39LqaTt46qhaPRoZU1e9L
        WoR0EGAeuQrmwmT1m4LTQLUKlp4T3iuSapgeOwfLULOkd5bCDuvQFclnebVuLVp7
        7wEM3UsfxVaknnuKZNlig+arkhZpYOpUYQYYS7GE+/tTxP8sxIH6pVha2G/Qe7vG
        s6HQG0hTAgMBAAECggEAQHHEcA/i2rpoo0qYRJLFcMI5Cr5ci+jKSRJES/znFMBs
        K/JM6bj27ZsSQsbbOq1dSeHR4BZYuK5g5Gm85WiBwWdu0VO9XqROt9nnPLU9AMpF
        iToYm80idF4I47XOT1/6vMwyGdORkwvbrp7ByrA+QnoBr7It5LLcEn0xvOUPW3ho
        wNopAQcLre4S46tI9tjhjhDe/VOb9GclZ6pm4OLSb/dFawDaPZxFm6f7aevyS6FM
        VmQ8YsrTqDpn9VnO6UNDhrGuvtrX5ochklQ4vbXcxyk7E74DVJP0kGIXYhBBHAj3
        CdYne9S7c08qPDKbt6tMTaBB9h8O4EV0vftKf4WQEQKBgQDqZ2x1ZEKoJQc+k+BS
        hnPu8BRREEXQQHXDKiQM9RY+oLM3BfVx4NI12NWRKTcoTfV+VfcVSKcNVdAZwbC2
        ZRX/QGw1GkpcJfHb9z3BeS1OUofR55fRNLbRxQ5yCD97WtmDeTX59fU1AV6IfcFM
        NbUELadN2zI2gE35CVo9wMyvCwKBgQDk5vugYszdp56FjPjRZIpzAgoQXxhgGSNv
        xMfBqKZ4Z1MDRgk28MbFEiEp07yhCS6jdTsvGe+eslqm0lp7WiMas/SQ4JU9FkrQ
        ZyuzvnEVWICbEo+90/Rr2JNGayZa7ECZ2lPFyrPLV6nuBdwqQL53EYyWCRTz5NZ1
        Q7uJWUG42QKBgQCs9ArOw197eXbS8YF+4r3/+xzCg2M/uZAqpJldBimXpDMX0km7
        8Mqp+If8R5DvKDaPNRbOmYDJEhwuJQAiVIvafspYlEFxpH3Ec7UZYDPRqouUkXEv
        Z9nNBb0W3ocYmXwMyg7NlHGM3qnFxCQv+yDJKHZdt/JgzGK78e6nye486QKBgQCW
        fL0FLq9dMivnxUx37U+QWNDg/oP5+czwWECzsvruwY8z4cGBGz6ypT6kTw3+GRlO
        YW4tgzGj9cHfVwAhhJr7nT+2V9AFvzgkVw/GNfgGfo7eZI+Xz1cr59C7RQqMUDIQ
        dBcLPD6D+vg/Ah9CsBoIEcOJiCL8TYAozATpQYMR0QKBgQDXCWh7A45QxYn0xq0B
        iEd59YCVUoQBmRjKJzQTzN+dufjeMeLPRFvG713rnAeTzCzVwLi49ZJ3Zp0QFFWO
        vd+cmpPmX/+Eq3yAit2rlbu5AMvwJiQXxOdShT3F9sMp8iPH4B+liZEoFPJO6RgG
        UT2FhaZzgKIEWnt4aN0GvPRHdw==
        -----END PRIVATE KEY-----

        EOF

        cat << EOF | /bin/vault kv put secret/${SECRET_DAPS_CERT_NAME} content=-
        -----BEGIN CERTIFICATE-----
        MIIDazCCAlOgAwIBAgIULRtsNKCEIXeJcpBg28vr6UgyfbIwDQYJKoZIhvcNAQEL
        BQAwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoM
        GEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0yMzAyMTMyMTE0NDlaFw0zMzAy
        MTAyMTE0NDlaMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEw
        HwYDVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwggEiMA0GCSqGSIb3DQEB
        AQUAA4IBDwAwggEKAoIBAQDRl5vqQTWBNDFqQonUKKC54cMB3CPat8Ec7yi4Rnhu
        KdvmUX6yuDEsC4ia5wLaPQEsAiGWopjeXGDxNS7nxAauZC/t8R6iZ6g+APq1zS4T
        /Kz48c609CZ8ryEKQtLgnKSNnJBYFf7wz7iVblcXl4idvL8kUbucw+giKiewTgGb
        g8nCBn2PQ9JXWPr39LqaTt46qhaPRoZU1e9LWoR0EGAeuQrmwmT1m4LTQLUKlp4T
        3iuSapgeOwfLULOkd5bCDuvQFclnebVuLVp77wEM3UsfxVaknnuKZNlig+arkhZp
        YOpUYQYYS7GE+/tTxP8sxIH6pVha2G/Qe7vGs6HQG0hTAgMBAAGjUzBRMB0GA1Ud
        DgQWBBRIDfz0SYxyVKHB5OqSag86ktrIODAfBgNVHSMEGDAWgBRIDfz0SYxyVKHB
        5OqSag86ktrIODAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQCX
        +hCBvBud9ph3p8FAKn1IntcmnC4H9BMDAwGM/QifgVVNRFe9hJJes2tKdVemYDk1
        kgqRoZEpTapqvLT8Iekd+h15uvP1e2BXzdwhcS67rActsbtksfL8h8q6NWXVWKQO
        9qARpzaCapIQ4BJTQnxTXlT9sqPyqnrqGQqTFoN5j71WELn3ETLeiWKwWjECkWx/
        bql3pyGKnPORP+7OF0gJDDkdS+Vwuh3S3E8g5K8osXTgqL71AIabfRvu0TDFpy0b
        /qfdxJfe5tS6sh1W8FaEgKYEyZQOVRa6wXzm8AkgaxlUcl9vVzmaoernxhn6sWCN
        95UUKv3iblFl7yB8vGmr
        -----END CERTIFICATE-----

        EOF

        }
  ui:
    enabled: true
    externalPort: 8200
    targetPort: 8200

###################################
# IRS EDC Consumer configuration  #
###################################
edc-postgresql:
  nameOverride: "tracex-consumer-edc-postgresql"
  fullnameOverride: "tracex-consumer-edc-postgresql"
  enabled: true
  auth:
    postgresPassword: "password"
    password: "password"
    database: "trace"
    username: "traceuser"

############
# KeyCloak #
############
keycloak:
  fullnameOverride: "keycloak"
  client:
    id: *config-keycloak-client-id
    secret: *config-keycloak-client-secret
  grand:
    type: *config-keycloak-grand-type
  scope: *config-keycloak-scope

